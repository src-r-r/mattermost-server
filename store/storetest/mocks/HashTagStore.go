// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v6/model"
	mock "github.com/stretchr/testify/mock"
)

// HashTagStore is an autogenerated mock type for the HashTagStore type
type HashTagStore struct {
	mock.Mock
}

// GetMostUsedTags provides a mock function with given fields: user, count
func (_m *HashTagStore) GetMostUsedTags(user *model.User, count *uint64) ([]*model.HashTagCount, error) {
	ret := _m.Called(user, count)

	var r0 []*model.HashTagCount
	if rf, ok := ret.Get(0).(func(*model.User, *uint64) []*model.HashTagCount); ok {
		r0 = rf(user, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.HashTagCount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User, *uint64) error); ok {
		r1 = rf(user, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentUserHashTags provides a mock function with given fields: user, count
func (_m *HashTagStore) GetRecentUserHashTags(user *model.User, count *uint64) ([]*model.HashTagTimed, error) {
	ret := _m.Called(user, count)

	var r0 []*model.HashTagTimed
	if rf, ok := ret.Get(0).(func(*model.User, *uint64) []*model.HashTagTimed); ok {
		r0 = rf(user, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.HashTagTimed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User, *uint64) error); ok {
		r1 = rf(user, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserHashTagsBegin provides a mock function with given fields: user, hash_tag_query, count
func (_m *HashTagStore) GetUserHashTagsBegin(user *model.User, hash_tag_query *string, count *uint64) ([]*model.HashTagTimed, error) {
	ret := _m.Called(user, hash_tag_query, count)

	var r0 []*model.HashTagTimed
	if rf, ok := ret.Get(0).(func(*model.User, *string, *uint64) []*model.HashTagTimed); ok {
		r0 = rf(user, hash_tag_query, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.HashTagTimed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User, *string, *uint64) error); ok {
		r1 = rf(user, hash_tag_query, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserHashTagsContains provides a mock function with given fields: user, hash_tag_query, count
func (_m *HashTagStore) GetUserHashTagsContains(user *model.User, hash_tag_query *string, count *uint64) ([]*model.HashTagTimed, error) {
	ret := _m.Called(user, hash_tag_query, count)

	var r0 []*model.HashTagTimed
	if rf, ok := ret.Get(0).(func(*model.User, *string, *uint64) []*model.HashTagTimed); ok {
		r0 = rf(user, hash_tag_query, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.HashTagTimed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User, *string, *uint64) error); ok {
		r1 = rf(user, hash_tag_query, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryHashTagBoard provides a mock function with given fields: user, hash_tag_query, count
func (_m *HashTagStore) QueryHashTagBoard(user *model.User, hash_tag_query *string, count *uint64) (*model.HashTagBoard, error) {
	ret := _m.Called(user, hash_tag_query, count)

	var r0 *model.HashTagBoard
	if rf, ok := ret.Get(0).(func(*model.User, *string, *uint64) *model.HashTagBoard); ok {
		r0 = rf(user, hash_tag_query, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HashTagBoard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User, *string, *uint64) error); ok {
		r1 = rf(user, hash_tag_query, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveHashTag provides a mock function with given fields: hash_tag, post_id
func (_m *HashTagStore) SaveHashTag(hash_tag *string, post_id *string) error {
	ret := _m.Called(hash_tag, post_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *string) error); ok {
		r0 = rf(hash_tag, post_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveHashTagFromPost provides a mock function with given fields: post
func (_m *HashTagStore) SaveHashTagFromPost(post *model.Post) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
